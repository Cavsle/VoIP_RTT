#ifndef _WAV_H_BAB
#define _WAV_H_BAB

typedef  unsigned	char	u8;
typedef				char	s8;
typedef  unsigned	short	u16;
typedef				short	s16;
typedef  unsigned	int		u32;
typedef				int		s32;

/*
printf("sizeof(u8)=%d\n",sizeof(u8));
printf("sizeof(s8)=%d\n",sizeof(s8));
printf("sizeof(u16)=%d\n",sizeof(u16));
printf("sizeof(s16)=%d\n",sizeof(s16));
printf("sizeof(u32)=%d\n",sizeof(u32));
printf("sizeof(s32)=%d\n",sizeof(s32));
*/

struct RIFF_HEADER_DEF
{
	s8 riff_id[4];     // 'R','I','F','F'
	u32 riff_size;
	s8 riff_format[4]; // 'W','A','V','E'
};

struct WAVE_FORMAT_DEF
{
	u16 FormatTag;
	u16 Channels;
	u32 SamplesPerSec;
	u32 AvgBytesPerSec;
	u16 BlockAlign;
	u16 BitsPerSample;
};

struct FMT_BLOCK_DEF
{
	s8 fmt_id[4];    // 'f','m','t',' '
	u32 fmt_size;
	struct WAVE_FORMAT_DEF wav_format;
};
#endif
/*
WAV文件格式
------------------------------------------------
	|             RIFF WAVE Chunk                  |
	|             ID  = 'RIFF'                     |
	|             RiffType = 'WAVE'                |
	------------------------------------------------
	|             Format Chunk                     |
	|             ID = 'fmt '                      |
	------------------------------------------------
	|             Fact Chunk(optional)             |
	|             ID = 'fact'                      |
	------------------------------------------------
	|             Data Chunk                       |
	|             ID = 'data'                      |
	------------------------------------------------
	图1   Wav格式包含Chunk示例 

	其中除了Fact Chunk外，其他三个Chunk是必须的。每个Chunk有各自的ID，位于Chunk最开始位置，
	作为标示，而且均为4个字节。并且紧跟在ID后面的是Chunk大小（去除ID和Size所占的字节数后剩下
	的其他字节数目），4个字节表示，低字节表示数值低位，高字节表示数值高位。下面具体介绍各个Chunk内容。
	PS：
	所有数值表示均为低字节表示低位，高字节表示高位。 

	2、具体介绍
	RIFF WAVE Chunk
	==================================
	|       |所占字节数|  具体内容   |
	==================================
	| ID    |  4 Bytes |   'RIFF'    |
	----------------------------------
	| Size  |  4 Bytes |             |
	----------------------------------
	| Type  |  4 Bytes |   'WAVE'    |
	----------------------------------
	图2  RIFF WAVE Chunk 

	以'FIFF'作为标示，然后紧跟着为size字段，该size是整个wav文件大小减去ID和Size所占用的字节数，
	即FileLen - 8 = Size。然后是Type字段，为'WAVE'，表示是wav文件。



	Format Chunk
	====================================================================
	|               |   字节数  |              具体内容                |
	====================================================================
	| ID            |  4 Bytes  |   'fmt '                             |
	--------------------------------------------------------------------
	| Size          |  4 Bytes  | 数值为16或18，18则最后又附加信息     |
	--------------------------------------------------------------------  ----
	| FormatTag     |  2 Bytes  | 编码方式，一般为0x0001               |     |
	--------------------------------------------------------------------     |
	| Channels      |  2 Bytes  | 声道数目，1--单声道；2--双声道       |     |
	--------------------------------------------------------------------     |
	| SamplesPerSec |  4 Bytes  | 采样频率                             |     |
	--------------------------------------------------------------------     |
	| AvgBytesPerSec|  4 Bytes  | 每秒所需字节数                       |     |===> WAVE_FORMAT
	--------------------------------------------------------------------     |
	| BlockAlign    |  2 Bytes  | 数据块对齐单位(每个采样需要的字节数) |     |
	--------------------------------------------------------------------     |
	| BitsPerSample |  2 Bytes  | 每个采样需要的bit数                  |     |
	--------------------------------------------------------------------     |
	|               |  2 Bytes  | 附加信息（可选，通过Size来判断有无） |     |
	--------------------------------------------------------------------  ----
	图3  Format Chunk 

	以'fmt '作为标示。一般情况下Size为16，此时最后附加信息没有；
	如果为18，则最后多了2个字节的附加信息。主要由一些软件制成的wav格式中含有该2个字节的附加信息。

	Fact Chunk
	==================================
	|       |所占字节数|  具体内容   |
	==================================
	| ID    |  4 Bytes |   'fact'    |
	----------------------------------
	| Size  |  4 Bytes |   数值为4   |
	----------------------------------
	| data  |  4 Bytes |             |
	----------------------------------
	图4  Fact Chunk 

	Fact Chunk是可选字段，一般当wav文件由某些软件转化而成，则包含该Chunk。


	Data Chunk
	==================================
	|       |所占字节数|  具体内容   |
	==================================
	| ID    |  4 Bytes |   'data'    |
	----------------------------------
	| Size  |  4 Bytes |             |
	----------------------------------
	| data  |          |             |
	----------------------------------
	图5 Data Chunk 

	Data Chunk是真正保存wav数据的地方，以'data'作为该Chunk的标示。然后是数据的大小。
	紧接着就是wav数据。根据Format Chunk中的声道数以及采样bit数，wav数据的bit位置可以分成以下几种形式：
	---------------------------------------------------------------------
	|   单声道  |    取样1    |    取样2    |    取样3    |    取样4    |
	|           |--------------------------------------------------------
	|  8bit量化 |    声道0    |    声道0    |    声道0    |    声道0    |
	---------------------------------------------------------------------
	|   双声道  |          取样1            |           取样2           |
	|           |--------------------------------------------------------
	|  8bit量化 |  声道0(左)  |  声道1(右)  |  声道0(左)  |  声道1(右)  |
	---------------------------------------------------------------------
	|           |          取样1            |           取样2           |
	|   单声道  |--------------------------------------------------------
	| 16bit量化 |    声道0    |  声道0      |    声道0    |  声道0      |
	|           | (低位字节)  | (高位字节)  | (低位字节)  | (高位字节)  |
	---------------------------------------------------------------------
	|           |                         取样1                         |
	|   双声道  |--------------------------------------------------------
	| 16bit量化 |  声道0(左)  |  声道0(左)  |  声道1(右)  |  声道1(右)  |
	|           | (低位字节)  | (高位字节)  | (低位字节)  | (高位字节)  |
	---------------------------------------------------------------------
	图6 wav数据bit位置安排方式 

*/